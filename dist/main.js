(()=>{"use strict";class e{constructor(e,t,i,s,n){this.reference=e,this.title=t,this.description=i,this.dueDate=s,this.priority=n}getTitle(){return this.title}getDescription(){return this.description}getDueDate(){return this.dueDate}getPriority(){return this.priority}getReference(){return this.reference}setTitle(e){this.title=e}setDescription(e){this.description=e}setDueDate(e){this.dueDate=e}setPriority(e){this.priority=e}setReference(e){this.reference=e}}function t(){let e=document.createElement("div");e.classList.add("item");let t=Object.assign(document.createElement("input"),{type:"text",placeholder:"Type here"});return e.appendChild(t),e}function i(){return new e(t())}new class{constructor(){this.lists=[]}addList(e){this.lists.push(e)}};let s=new class{constructor(e,t){this.name=e,this.reference=t,this.items=[]}getName(){return this.name}getItems(){return this.items}getReference(){return this.reference}setName(e){this.name=e}addItem(e){this.items.push(e)}removeItem(e){this.items=items.splice(array.indexOf(e),1)}}("To-Do",function(){let e=document.createElement("div");e.classList.add("list");let t=document.createElement("div");t.classList.add("title");let i=Object.assign(document.createElement("input"),{type:"text",value:"To-Do"}),s=document.createElement("div");return s.classList.add("items"),t.appendChild(i),e.appendChild(t),e.appendChild(s),e}()),n=t(),r=new e(n);s.getReference().querySelector(".items").appendChild(n),s.addItem(r),function e(t,s){let n=t.getReference().querySelector("input");console.log(n),n.addEventListener("change",(()=>{t.setTitle(n.value),console.log("Title has been updated"),console.log(t.getTitle()),console.log(s.getItems())})),n.addEventListener("keydown",(function(t){if("Enter"===t.key){let t=i();s.addItem(t),s.getReference().querySelector(".items").appendChild(t.getReference()),t.getReference().querySelector("input").focus(),e(t,s),console.log("New Item has been added")}}))}(r,s),document.querySelector("div.lists").appendChild(s.getReference())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,